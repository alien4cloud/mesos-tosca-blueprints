tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: mesos-types
  template_version: 1.4.0-SNAPSHOT
  template_author: alien4cloud

description: "TOSCA Apache Mesos & Mesosphere Marathon profile."

imports:
  - tosca-normative-types:1.0.0-ALIEN14
  - docker-engine-type:1.4.0-SNAPSHOT

node_types:
  org.alien4cloud.nodes.MesosMaster:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      A Mesos master agent.
    tags:
      icon: /images/mesos_icon.png
    properties:
      # TODO: implement firewall rules, hooks & modules
      firewall_rules:
        type: string
        required: false
      hooks:
        type: string
        required: false
        description: >
          A comma-separated list of hook modules to be installed inside master/slave.
      modules:
        type: string
        required: false
        description: >
          List of modules in a JSON-format to be loaded and be available to the internal subsystems.
      work_dir:
        type: string
        default: /var/lib/mesos
      log_dir:
        type: string
        default: "/var/log/mesos"
        required: false
      port:
        type: integer
        default: 5050
      cluster_name:
        type: string
        default: "Mesos cluster"
        required: false
    artifacts:
      - zoo_config:
          file: artifacts/zoo.cfg
          type: tosca.artifacts.File
    attributes:
      external_url: { concat: ["http://", get_attribute: [HOST, public_ip_address], ":", get_property: [SELF, port]] }
      master_url: { concat: ["zk://", get_operation_output: [SELF, Standard, configure, zk_endpoints], "/mesos"] }
      zk_endpoints: { get_operation_output: [SELF, Standard, configure, zk_endpoints] }
    capabilities:
      master: org.alien4cloud.capabilities.MesosMaster
      host: org.alien4cloud.capabilities.MesosMasterHost
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: tosca.nodes.Compute
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
          node_filter:
            capabilities:
              - tosca.capabilities.OperatingSystem:
                  properties:
                    - type: { equal: linux }
                    - architecture: { equal: x86_64 }
                    - distribution: { valid_values: [ debian, rhel, ubuntu, centos ] }
    interfaces:
      Standard:
        create:
          inputs:
            OS_DISTR: { get_property: [HOST, os, distribution] }
            OS_VERS: { get_property: [HOST, os, version] }
            IP: { get_attribute: [HOST, ip_address] }
            MESOS_VERSION: { get_property: [SELF, component_version] }
          implementation: scripts/install_mesos.sh
        configure:
          inputs:
            MESOS_CLUSTER: { get_property: [SELF, cluster_name] }
            MESOS_IP: { get_attribute: [HOST, ip_address] }
            MESOS_PORT: { get_property: [SELF, port] }
            MESOS_HOSTNAME: { get_attribute: [HOST, public_ip_address] }
            MESOS_WORK_DIR: { get_property: [SELF, work_dir] }
            MESOS_LOG_DIR: { get_property: [SELF, log_dir] }
          implementation: scripts/master/configure.sh
        start:
          implementation: scripts/master/start.sh
        stop:
          implementation: scripts/master/stop.sh

  org.alien4cloud.nodes.MesosSlave:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      A Mesos slave agent.
    tags:
      icon: /images/mesos_icon.png
    properties:
      # TODO: implement firewall rules, hooks, modules & attributes
      firewall_rules:
        type: string
        required: false
      hooks:
        type: string
        required: false
        description: >
          A comma-separated list of hook modules to be installed inside master/slave.
      modules:
        type: string
        required: false
        description: >
          List of modules in a JSON-format to be loaded and be available to the internal subsystems.
      log_dir:
        type: string
        default: "/var/log/mesos"
        required: false
      port:
        type: integer
        default: 5051
      attributes:
        type: string
        description: >
          Attributes of the slave machine, in the form: rack:2 or rack:2;u:1
        required: false
      isolation:
        type: string
        required: true
        default: "posix/cpu,posix/mem"
        constraints:
          - valid_values: [ "posix/cpu,posix/mem", "cgroups/cpu,cgroups/mem" ]
      work_dir:
        type: string
        required: false
        default: "/var/lib/mesos"
    interfaces:
      Standard:
        create:
          inputs:
            OS_DISTR: { get_property: [HOST, os, distribution] }
            OS_VERS: { get_property: [HOST, os, version] }
            IP: { get_attribute: [HOST, ip_address] }
            MESOS_VERSION: { get_property: [SELF, component_version] }
          implementation: scripts/install_mesos.sh
        configure:
          inputs:
            MESOS_IP: { get_attribute: [HOST, ip_address] }
            MESOS_PORT: { get_property: [SELF, port] }
            MESOS_HOSTNAME: { get_attribute: [HOST, public_ip_address] }
            MESOS_LOG_DIR: { get_property: [SELF, log_dir] }
            MESOS_WORK_DIR: { get_property: [SELF, work_dir] }
            MESOS_ISOLATION: { get_property: [SELF, isolation] }
          implementation: scripts/slave/configure.sh
        start:
          implementation: scripts/slave/start.sh
        stop:
          implementation: scripts/slave/stop.sh
    capabilities:
      host: org.alien4cloud.capabilities.MesosSlaveHost
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: tosca.nodes.Compute
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
          node_filter:
            capabilities:
              - tosca.capabilities.OperatingSystem:
                  properties:
                    - type: { equal: linux }
                    - architecture: { equal: x86_64 }
                    - distribution: { valid_values: [ debian, rhel, ubuntu, centos ] }
      - master:
          capability: org.alien4cloud.capabilities.MesosMaster
          relationship: org.alien4cloud.relationships.MesosSlaveConnectsToMaster
          occurrences: [1, 1]
      - docker_cli:
          capability: org.alien4cloud.capabilities.DockerCLI
          relationship: org.alien4cloud.relationships.MesosSlaveDependsOnDocker
          occurrences: [0, 1]
      - dns_server:
          capability: org.alien4cloud.capabilities.MesosDNS
          relationship: org.alien4cloud.relationships.MesosSlaveConnectsToDNS
          occurrences: [0, unbounded]

  org.alien4cloud.nodes.Marathon:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Marathon scheduler.
      NB: This component requires Oracle's Java 8. The Oracle licence is therefore implicitly accepted. The licence can be found here: http://www.oracle.com/technetwork/java/javase/downloads/thirdpartylicensereadme-java8-2168078.txt.
    tags:
      icon: images/marathon_icon.png
    properties:
      version:
        type: string
        required: true
        default: "1.3.10-1.0.627"
    attributes:
      external_url: { concat: [ "http://", get_attribute: [HOST, public_ip_address], ":8080/ui"] }
      api_url: { concat: ["http://", get_attribute: [HOST, public_ip_address], ":8080/v2"] }
    capabilities:
      marathon: org.alien4cloud.capabilities.MarathonMaster
      host: org.alien4cloud.capabilities.MarathonHost
    requirements:
      - host:
          capability: org.alien4cloud.capabilities.MesosMasterHost
          relationship: org.alien4cloud.relationships.MarathonHostedOnMaster
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          inputs:
            OS: { get_property: [HOST, os, distribution] }
            OS_VERS: { get_property: [HOST, os, version] }
            MARATHON_VERSION: { get_property: [SELF, version] }
          implementation: scripts/marathon/install.sh
        start:
          inputs:
            MARATHON_MASTER: { get_attribute: [HOST, master_url] }
            MARATHON_HOSTNAME: { get_attribute: [HOST, public_ip_address] }
            MARATHON_ZK: { concat: [ "zk://", get_attribute: [HOST, zk_endpoints], "/marathon" ] }
          implementation: scripts/marathon/start.sh
        stop: scripts/marathon/stop.sh

  org.alien4cloud.nodes.MesosDNS:
    derived_from: tosca.nodes.SoftwareComponent
    description: DNS service for Mesos clusters.
    properties:
      cpu_alloc:
        type: float
        required: true
        default: 1.0
      mem_alloc:
        type: integer
        required: true
        default: 512
    capabilities:
      dns_server: org.alien4cloud.capabilities.MesosDNS
    requirements:
      - host:
          capability: org.alien4cloud.capabilities.MesosSlaveHost
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
      - marathon:
          capability: org.alien4cloud.capabilities.MarathonMaster
          relationship: org.alien4cloud.relationships.MesosDNSConnectsToMaster
          occurrences: [1, 1]
    artifacts:
      - dns_config:
          file: artifacts/mesos-dns-config.json
          type: tosca.artifacts.File
      - marathon_template:
          file: artifacts/mesos-dns-template.json
          type: tosca.artifacts.File
    interfaces:
      Standard:
        create: scripts/service-discovery/install-mesosdns.sh
        configure:
          inputs:
            SLAVE_LOCAL_IP: { get_attribute: [HOST, ip_address] }
            SLAVE_IP: { get_attribute: [HOST, public_ip_address] }
            CPU_ALLOC: { get_property: [SELF, cpu_alloc] }
            MEM_ALLOC: { get_property: [SELF, mem_alloc] }
          implementation: scripts/service-discovery/configure-mesosdns.sh
        start: scripts/service-discovery/start-mesosdns.sh

  org.alien4cloud.nodes.MarathonLB:
    derived_from: tosca.nodes.SoftwareComponent
    description: Marathon load-balancer for Mesos clusters.
    properties:
      instances:
        type: integer
        required: true
        default: 1
      cpu_alloc:
        type: float
        required: true
        default: 1.0
      mem_alloc:
        type: integer
        required: true
        default: 512
    requirements:
      - host:
          capability: org.alien4cloud.capabilities.MarathonHost
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
    artifacts:
      - marathon_template:
          file: artifacts/marathon-lb-template.json
          type: tosca.artifacts.File
    interfaces:
      Standard:
        configure:
          inputs:
            NB_INST: { get_property: [SELF, instances] }
            CPU_ALLOC: { get_property: [SELF, cpu_alloc] }
            MEM_ALLOC: { get_property: [SELF, mem_alloc] }
            MARATHON_API: { get_attribute: [HOST, api_url] }
          implementation: scripts/service-discovery/configure-marathonlb.sh
        start: scripts/service-discovery/start-marathonlb.sh
  org.alien4cloud.nodes.RexrayClient:
    derived_from: tosca.nodes.SoftwareComponent
    description: Docker volume driver plugin for external storage management.
    properties:
      storage_service:
        type: string
        required: true
    requirements:
      - host:
          capability: org.alien4cloud.capabilities.DockerHost
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
      - libstorage_server:
          capability: org.alien4cloud.capabilities.LibStorageServer
          relationship: org.alien4cloud.relationships.RexrayConnectsToLibStorage
    artifacts:
      - rexray_config:
          file: artifacts/rexray_config.yml
          type: tosca.artifacts.File
    interfaces:
      Standard:
        create: scripts/rexray/create.sh
        configure:
          inputs:
            STORAGE_SERVICE: { get_property: [SELF, storage_service] }
          implementation: scripts/rexray/configure_client.sh
        start: scripts/rexray/start.sh
  org.alien4cloud.nodes.RexrayServer:
    derived_from: tosca.nodes.SoftwareComponent
    description: Serves as a centralized libStorage server for Rexray clients
    capabilities:
      libstorage_server: org.alien4cloud.capabilities.LibStorageServer
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: tosca.nodes.Compute
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
    artifacts:
      - rexray_config:
          type: tosca.artifacts.File
    interfaces:
      Standard:
        create: scripts/rexray/create.sh
        start: scripts/rexray/start.sh

capability_types:
  org.alien4cloud.capabilities.MesosMasterHost:
    derived_from: tosca.capabilities.Container
  org.alien4cloud.capabilities.MesosMaster:
    derived_from: tosca.capabilities.Root
  org.alien4cloud.capabilities.MesosSlaveHost:
    derived_from: tosca.capabilities.Container
  org.alien4cloud.capabilities.MarathonMaster:
    derived_from: tosca.capabilities.Root
  org.alien4cloud.capabilities.MarathonHost:
    derived_from: tosca.capabilities.Container
  org.alien4cloud.capabilities.MesosDNS:
    derived_from: tosca.capabilities.Root
  org.alien4cloud.capabilities.LibStorageServer:
    derived_from: tosca.capabilities.Endpoint
    properties:
      protocol:
        type: string
        default: tcp
        required: true
      port:
        type: integer
        required: true
        default: 7979

relationship_types:
  org.alien4cloud.relationships.MarathonHostedOnMaster:
    derived_from: tosca.relationships.HostedOn
    description: Relationship used to bind the Marathon scheduler to a Mesos Master
    valid_target_types: [ org.alien4cloud.nodes.MesosMaster ]
  org.alien4cloud.relationships.AppHostedOnSlave:
    derived_from: tosca.relationships.HostedOn
    valid_target_types: [ org.alien4cloud.nodes.MesosSlave ]
  org.alien4cloud.relationships.MesosSlaveConnectsToMaster:
    derived_from: tosca.relationships.ConnectsTo
    description: Relationship used to bind a slave to a master
    valid_target_types: [ org.alien4cloud.nodes.MesosMaster ]
    interfaces:
      Configure:
        post_configure_source:
          inputs:
            MESOS_MASTER: { get_attribute: [TARGET, master_url] }
          implementation: scripts/slave/configure_connectsToMaster.sh
  org.alien4cloud.relationships.MesosDNSConnectsToMaster:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.nodes.Marathon ]
    interfaces:
      Configure:
        post_configure_source:
          inputs:
            MARATHON_API: { get_attribute: [TARGET, api_url] }
          implementation: scripts/service-discovery/configure_mesosdnsConnectsToMaster.sh
  org.alien4cloud.relationships.AppHostedOnMarathon:
    derived_from: tosca.relationships.HostedOn
    valid_target_types: [ org.alien4cloud.nodes.Marathon ]
  org.alien4cloud.relationships.MesosSlaveConnectsToDNS:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.nodes.MesosDNS ]
    interfaces:
      Configure:
        add_target:
          inputs:
            DNS_IP: { get_attribute: [TARGET, ip_address] }
          implementation: scripts/slave/configure_connectsToDNS.sh
  org.alien4cloud.relationships.MesosSlaveDependsOnDocker:
    derived_from: tosca.relationships.DependsOn
    valid_target_types: [ org.alien4cloud.nodes.DockerEngine ]
    description: Relationship used to bind a Mesos slave to a Docker engine
    interfaces:
        Configure:
          post_configure_source: scripts/slave/configure_dependsOnDocker.sh
  org.alien4cloud.relationships.RexrayConnectsToLibStorage:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.nodes.RexrayServer ]
    description: Connects Rexray clients to the Rexray server
    interfaces:
      Configure:
        post_configure_source:
          inputs:
            REXRAY_SERVER: { get_attribute: [TARGET, ip_address ] }
          implementation: scripts/rexray/configure_connectsToLibStorage.sh
